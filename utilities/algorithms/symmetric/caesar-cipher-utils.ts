import { getTimestamp } from '../../time/timestamp-utils';

type CaesarMode = 'encrypt' | 'decrypt';

function shiftChar(char: string, key: number, mode: CaesarMode): string {
  if (!/[a-zA-Z]/.test(char)) return char;

  const isLower = char === char.toLowerCase();
  const base = isLower ? 97 : 65;
  const alphaIndex = char.toUpperCase().charCodeAt(0) - 65;
  const shift = mode === 'encrypt' ? key : -key;
  const isDecrypt = mode === 'decrypt' ? 26 : 0;
  const shiftedIndex = Math.abs((alphaIndex + shift + isDecrypt) % 26);

  return String.fromCharCode(base + shiftedIndex);
}

export function encrypt(text: string, key: number): string {
  return text
    .split('')
    .map((char) => shiftChar(char, key, 'encrypt'))
    .join('');
}

export function decrypt(text: string, key: number): string {
  return text
    .split('')
    .map((char) => shiftChar(char, key, 'decrypt'))
    .join('');
}

export function generateSteps(
  text: string,
  key: number,
  isDecrypt: boolean,
): string {
  const steps: string[] = [];
  const mode: CaesarMode = isDecrypt ? 'decrypt' : 'encrypt';

  for (const char of text) {
    if (char === ' ') {
      steps.push('\n');
      continue;
    }

    if (/[a-zA-Z]/.test(char)) {
      const isLower = char === char.toLowerCase();
      const base = isLower ? 97 : 65;
      const alphaIndex = char.toUpperCase().charCodeAt(0) - 65;
      const shift = isDecrypt ? -key : key;
      const isEncrypt = mode === 'encrypt' ? 0 : 26;
      const shiftedIndex = Math.abs((alphaIndex + shift + isEncrypt) % 26);
      const newChar = String.fromCharCode(base + shiftedIndex);
      const operation = isDecrypt ? 'D' : 'E';

      steps.push(
        `${operation}(${char}) = (${alphaIndex.toString().padStart(2)} ${
          isDecrypt ? `- ${key} + 26` : `+ ${key}`
        }) % 26\t= ${shiftedIndex.toString().padStart(2)} → ${newChar}`,
      );
    } else {
      steps.push(`'${char}' (non-alphabet) tidak berubah!`);
    }
  }

  return steps.join('\n');
}

export function downloadResult({
  mode,
  key,
  plainText,
  cipherText,
}: {
  mode: CaesarMode;
  key: number;
  plainText: string;
  cipherText: string;
}) {
  const now = new Date();
  const timestamp = now.toLocaleString('en-EN', {
    dateStyle: 'full',
    timeStyle: 'long',
  });

  const header = mode === 'decrypt' ? 'DECRYPTION' : 'ENCRYPTION';
  const inputLabel = mode === 'decrypt' ? '>>> CIPHER TEXT' : '>>>> PLAIN TEXT';
  const outputLabel = mode === 'decrypt' ? '>>>> PLAIN TEXT' : '>>> CIPHER TEXT';
  const inputText = plainText;
  const outputText = cipherText;

  const content = `
=========== CAESAR CIPHER ${header} RESULT ===========
Time       : ${timestamp}
Key Used   : ${key}
-------------------------------------------------------

${inputLabel}:

${inputText}

${outputLabel}:

${outputText}

=======================================================
Generated by Cryptography & Network Security
Made with ❤️ by AlicelieseLou
`.trim();

  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `caesar-cipher-${header.toLowerCase()}-${getTimestamp()}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
